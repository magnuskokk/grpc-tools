// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: protobuf/heartbeat/service.proto

package heartbeat

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "github.com/mwitkow/go-proto-validators"
	grpc "google.golang.org/grpc"
	io "io"
	math "math"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type PingRequest struct {
	Message              []byte   `protobuf:"bytes,1,opt,name=Message,proto3" json:"Message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PingRequest) Reset()         { *m = PingRequest{} }
func (m *PingRequest) String() string { return proto.CompactTextString(m) }
func (*PingRequest) ProtoMessage()    {}
func (*PingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1a8dcc4dd6d17f26, []int{0}
}
func (m *PingRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PingRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PingRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PingRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PingRequest.Merge(m, src)
}
func (m *PingRequest) XXX_Size() int {
	return m.Size()
}
func (m *PingRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PingRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PingRequest proto.InternalMessageInfo

func (m *PingRequest) GetMessage() []byte {
	if m != nil {
		return m.Message
	}
	return nil
}

func (*PingRequest) XXX_MessageName() string {
	return "heartbeat.PingRequest"
}

type PingReply struct {
	Message              []byte   `protobuf:"bytes,1,opt,name=Message,proto3" json:"Message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PingReply) Reset()         { *m = PingReply{} }
func (m *PingReply) String() string { return proto.CompactTextString(m) }
func (*PingReply) ProtoMessage()    {}
func (*PingReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_1a8dcc4dd6d17f26, []int{1}
}
func (m *PingReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PingReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PingReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PingReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PingReply.Merge(m, src)
}
func (m *PingReply) XXX_Size() int {
	return m.Size()
}
func (m *PingReply) XXX_DiscardUnknown() {
	xxx_messageInfo_PingReply.DiscardUnknown(m)
}

var xxx_messageInfo_PingReply proto.InternalMessageInfo

func (m *PingReply) GetMessage() []byte {
	if m != nil {
		return m.Message
	}
	return nil
}

func (*PingReply) XXX_MessageName() string {
	return "heartbeat.PingReply"
}

type StreamRequest struct {
	ID                   []byte     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	CreateDate           *time.Time `protobuf:"bytes,2,opt,name=create_date,json=createDate,proto3,stdtime" json:"create_date,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *StreamRequest) Reset()         { *m = StreamRequest{} }
func (m *StreamRequest) String() string { return proto.CompactTextString(m) }
func (*StreamRequest) ProtoMessage()    {}
func (*StreamRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1a8dcc4dd6d17f26, []int{2}
}
func (m *StreamRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StreamRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StreamRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StreamRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamRequest.Merge(m, src)
}
func (m *StreamRequest) XXX_Size() int {
	return m.Size()
}
func (m *StreamRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StreamRequest proto.InternalMessageInfo

func (m *StreamRequest) GetID() []byte {
	if m != nil {
		return m.ID
	}
	return nil
}

func (m *StreamRequest) GetCreateDate() *time.Time {
	if m != nil {
		return m.CreateDate
	}
	return nil
}

func (*StreamRequest) XXX_MessageName() string {
	return "heartbeat.StreamRequest"
}

type StreamPacket struct {
	Id                   []byte   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Data                 []byte   `protobuf:"bytes,2,opt,name=Data,proto3" json:"Data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StreamPacket) Reset()         { *m = StreamPacket{} }
func (m *StreamPacket) String() string { return proto.CompactTextString(m) }
func (*StreamPacket) ProtoMessage()    {}
func (*StreamPacket) Descriptor() ([]byte, []int) {
	return fileDescriptor_1a8dcc4dd6d17f26, []int{3}
}
func (m *StreamPacket) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StreamPacket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StreamPacket.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StreamPacket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamPacket.Merge(m, src)
}
func (m *StreamPacket) XXX_Size() int {
	return m.Size()
}
func (m *StreamPacket) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamPacket.DiscardUnknown(m)
}

var xxx_messageInfo_StreamPacket proto.InternalMessageInfo

func (m *StreamPacket) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *StreamPacket) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (*StreamPacket) XXX_MessageName() string {
	return "heartbeat.StreamPacket"
}
func init() {
	proto.RegisterType((*PingRequest)(nil), "heartbeat.PingRequest")
	golang_proto.RegisterType((*PingRequest)(nil), "heartbeat.PingRequest")
	proto.RegisterType((*PingReply)(nil), "heartbeat.PingReply")
	golang_proto.RegisterType((*PingReply)(nil), "heartbeat.PingReply")
	proto.RegisterType((*StreamRequest)(nil), "heartbeat.StreamRequest")
	golang_proto.RegisterType((*StreamRequest)(nil), "heartbeat.StreamRequest")
	proto.RegisterType((*StreamPacket)(nil), "heartbeat.StreamPacket")
	golang_proto.RegisterType((*StreamPacket)(nil), "heartbeat.StreamPacket")
}

func init() { proto.RegisterFile("protobuf/heartbeat/service.proto", fileDescriptor_1a8dcc4dd6d17f26) }
func init() {
	golang_proto.RegisterFile("protobuf/heartbeat/service.proto", fileDescriptor_1a8dcc4dd6d17f26)
}

var fileDescriptor_1a8dcc4dd6d17f26 = []byte{
	// 537 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x53, 0xc1, 0x6e, 0xd3, 0x4a,
	0x14, 0x7d, 0xe3, 0xd7, 0x36, 0xea, 0x34, 0x45, 0x68, 0x84, 0x20, 0x8a, 0x50, 0x62, 0x59, 0x45,
	0x94, 0x82, 0x67, 0xdc, 0x20, 0x58, 0x94, 0x55, 0xdb, 0x80, 0xe8, 0xa2, 0x52, 0x70, 0x59, 0xb1,
	0x41, 0x13, 0xfb, 0x32, 0xb1, 0x6a, 0x7b, 0x8c, 0x67, 0x92, 0xb4, 0x4b, 0xf8, 0x02, 0x04, 0x2b,
	0x7e, 0x81, 0xaf, 0x60, 0xd9, 0x25, 0x12, 0x7b, 0x8a, 0x52, 0x16, 0x7c, 0x06, 0xca, 0x38, 0x76,
	0x02, 0x45, 0xac, 0x7c, 0xef, 0x9c, 0x73, 0x8f, 0xaf, 0xce, 0x9c, 0xc1, 0x76, 0x96, 0x4b, 0x2d,
	0xfb, 0xc3, 0x57, 0x6c, 0x00, 0x3c, 0xd7, 0x7d, 0xe0, 0x9a, 0x29, 0xc8, 0x47, 0x51, 0x00, 0xd4,
	0x40, 0x64, 0xb5, 0x02, 0x9a, 0x37, 0x85, 0x94, 0x22, 0x06, 0xc6, 0xb3, 0x88, 0xf1, 0x34, 0x95,
	0x9a, 0xeb, 0x48, 0xa6, 0xaa, 0x20, 0x36, 0xdb, 0x33, 0xb4, 0x52, 0xd4, 0x51, 0x02, 0x4a, 0xf3,
	0x24, 0x9b, 0x11, 0xee, 0x99, 0x4f, 0xe0, 0x0a, 0x48, 0x5d, 0x35, 0xe6, 0x42, 0x40, 0xce, 0x64,
	0x66, 0x24, 0xfe, 0x22, 0xe7, 0x8a, 0x48, 0x0f, 0x86, 0x7d, 0x1a, 0xc8, 0x84, 0x09, 0x29, 0xe4,
	0x5c, 0x77, 0xda, 0x99, 0xc6, 0x54, 0x33, 0xfa, 0xc3, 0x05, 0x7a, 0x32, 0x8e, 0xf4, 0xb1, 0x1c,
	0x33, 0x21, 0x5d, 0x03, 0xba, 0x23, 0x1e, 0x47, 0x21, 0xd7, 0x32, 0x57, 0xac, 0x2a, 0x8b, 0x39,
	0xe7, 0x36, 0x5e, 0xeb, 0x45, 0xa9, 0xf0, 0xe1, 0xf5, 0x10, 0x94, 0x26, 0x0d, 0x5c, 0x3b, 0x04,
	0xa5, 0xb8, 0x80, 0x06, 0xb2, 0xd1, 0x66, 0xdd, 0x2f, 0x5b, 0xe7, 0x16, 0x5e, 0x2d, 0x88, 0x59,
	0x7c, 0xfa, 0x0f, 0xda, 0x47, 0x84, 0xd7, 0x8f, 0x74, 0x0e, 0x3c, 0x29, 0x25, 0x1f, 0x63, 0x2b,
	0x0a, 0x0b, 0xda, 0xde, 0x83, 0xc9, 0xb7, 0xb6, 0x75, 0xd0, 0x9d, 0x9c, 0xb7, 0xef, 0x6e, 0x6d,
	0x1c, 0x0e, 0x95, 0xb6, 0x07, 0x7c, 0x04, 0x76, 0x0c, 0xe9, 0x66, 0x14, 0xde, 0xb1, 0xfb, 0xa0,
	0xc7, 0x00, 0xa9, 0xed, 0xd9, 0x3c, 0x0d, 0xed, 0x6d, 0xcf, 0xf3, 0xb2, 0xff, 0x4e, 0x7e, 0xd6,
	0x7c, 0x2b, 0x0a, 0xc9, 0x2e, 0x5e, 0x0b, 0x72, 0xe0, 0x1a, 0x5e, 0x86, 0x5c, 0x43, 0xc3, 0xb2,
	0xd1, 0xe6, 0x5a, 0xa7, 0x49, 0x0b, 0xd3, 0x69, 0x69, 0x0e, 0x7d, 0x5e, 0x9a, 0xbe, 0xb7, 0xf4,
	0xee, 0xbc, 0x8d, 0x7c, 0x5c, 0x0c, 0x75, 0xb9, 0x06, 0xa7, 0x83, 0xeb, 0xc5, 0x6a, 0x3d, 0x1e,
	0x1c, 0x83, 0x26, 0x57, 0xe6, 0x9b, 0x99, 0x5f, 0x10, 0xbc, 0xd4, 0xe5, 0x9a, 0x1b, 0xed, 0xba,
	0x6f, 0xea, 0xce, 0x27, 0x84, 0xaf, 0x3e, 0x2d, 0x13, 0x70, 0x54, 0x24, 0x83, 0xec, 0xe3, 0xa5,
	0xa9, 0x17, 0xe4, 0x3a, 0xad, 0xc2, 0x41, 0x17, 0x5c, 0x6c, 0x5e, 0xbb, 0x74, 0x9e, 0xc5, 0xa7,
	0xce, 0xfa, 0xdb, 0xaf, 0x3f, 0x3e, 0x58, 0x35, 0xb2, 0xcc, 0xb2, 0xe9, 0xf0, 0x33, 0xbc, 0x52,
	0x6c, 0x43, 0x1a, 0x0b, 0xf4, 0xdf, 0xbc, 0x6b, 0xde, 0xb8, 0x84, 0x14, 0xab, 0x3b, 0xc4, 0x68,
	0xd5, 0x9d, 0x1a, 0x53, 0xe6, 0x78, 0x07, 0x6d, 0x79, 0x68, 0xef, 0x0d, 0x7a, 0xbf, 0xfb, 0x84,
	0x2c, 0x77, 0xfe, 0xdf, 0xa6, 0xde, 0x16, 0xb2, 0xf2, 0x1d, 0x4c, 0x84, 0xdf, 0xdb, 0xb7, 0x2b,
	0x11, 0x7b, 0xb7, 0x77, 0x40, 0x36, 0x06, 0x5a, 0x67, 0x6a, 0x87, 0xb1, 0x3f, 0x13, 0x26, 0xf2,
	0x2c, 0x70, 0xe1, 0x84, 0x27, 0x59, 0x0c, 0x67, 0x93, 0x16, 0xfa, 0x32, 0x69, 0xa1, 0xef, 0x93,
	0x16, 0xfa, 0x7c, 0xd1, 0x42, 0x67, 0x17, 0x2d, 0xf4, 0xc2, 0xa1, 0x94, 0x51, 0x5a, 0x3e, 0x10,
	0x35, 0x7f, 0x33, 0x8f, 0xaa, 0xaa, 0xbf, 0x62, 0xae, 0xe2, 0xfe, 0xaf, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x41, 0xfa, 0x3d, 0x44, 0x5a, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// HeartbeatServiceClient is the client API for HeartbeatService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HeartbeatServiceClient interface {
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingReply, error)
	Stream(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (HeartbeatService_StreamClient, error)
}

type heartbeatServiceClient struct {
	cc *grpc.ClientConn
}

func NewHeartbeatServiceClient(cc *grpc.ClientConn) HeartbeatServiceClient {
	return &heartbeatServiceClient{cc}
}

func (c *heartbeatServiceClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingReply, error) {
	out := new(PingReply)
	err := c.cc.Invoke(ctx, "/heartbeat.HeartbeatService/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *heartbeatServiceClient) Stream(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (HeartbeatService_StreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_HeartbeatService_serviceDesc.Streams[0], "/heartbeat.HeartbeatService/Stream", opts...)
	if err != nil {
		return nil, err
	}
	x := &heartbeatServiceStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type HeartbeatService_StreamClient interface {
	Recv() (*StreamPacket, error)
	grpc.ClientStream
}

type heartbeatServiceStreamClient struct {
	grpc.ClientStream
}

func (x *heartbeatServiceStreamClient) Recv() (*StreamPacket, error) {
	m := new(StreamPacket)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// HeartbeatServiceServer is the server API for HeartbeatService service.
type HeartbeatServiceServer interface {
	Ping(context.Context, *PingRequest) (*PingReply, error)
	Stream(*StreamRequest, HeartbeatService_StreamServer) error
}

func RegisterHeartbeatServiceServer(s *grpc.Server, srv HeartbeatServiceServer) {
	s.RegisterService(&_HeartbeatService_serviceDesc, srv)
}

func _HeartbeatService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeartbeatServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/heartbeat.HeartbeatService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeartbeatServiceServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HeartbeatService_Stream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HeartbeatServiceServer).Stream(m, &heartbeatServiceStreamServer{stream})
}

type HeartbeatService_StreamServer interface {
	Send(*StreamPacket) error
	grpc.ServerStream
}

type heartbeatServiceStreamServer struct {
	grpc.ServerStream
}

func (x *heartbeatServiceStreamServer) Send(m *StreamPacket) error {
	return x.ServerStream.SendMsg(m)
}

var _HeartbeatService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "heartbeat.HeartbeatService",
	HandlerType: (*HeartbeatServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _HeartbeatService_Ping_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Stream",
			Handler:       _HeartbeatService_Stream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "protobuf/heartbeat/service.proto",
}

func (m *PingRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PingRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Message) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PingReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PingReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Message) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *StreamRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StreamRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.ID)))
		i += copy(dAtA[i:], m.ID)
	}
	if m.CreateDate != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintService(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreateDate)))
		n1, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.CreateDate, dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *StreamPacket) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StreamPacket) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.Data) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintService(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *PingRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PingReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StreamRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.CreateDate != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreateDate)
		n += 1 + l + sovService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StreamPacket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovService(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozService(x uint64) (n int) {
	return sovService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PingRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PingRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PingRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = append(m.Message[:0], dAtA[iNdEx:postIndex]...)
			if m.Message == nil {
				m.Message = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PingReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PingReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PingReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = append(m.Message[:0], dAtA[iNdEx:postIndex]...)
			if m.Message == nil {
				m.Message = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StreamRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StreamRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StreamRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = append(m.ID[:0], dAtA[iNdEx:postIndex]...)
			if m.ID == nil {
				m.ID = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateDate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreateDate == nil {
				m.CreateDate = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.CreateDate, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StreamPacket) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StreamPacket: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StreamPacket: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthService
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthService
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowService
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipService(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthService
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthService = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowService   = fmt.Errorf("proto: integer overflow")
)
