package server

// TemplateData for rendering server templates.
type TemplateData struct {
	Name        string
	Bin         string
	Version     string
	Register    string
	Implementor string
}

// GrpcTpl tpl string
var GrpcTpl = `// DO NOT EDIT. This file is generated.

package main

import (
	"app/api/{{ .Name }}"
	"app/idl/{{ .Name }}/{{ .Name }}{{ .Version }}"
	"app/pkg/server"
	"context"
	"fmt"
	"os"
	"os/signal"
	"sync"
	"syscall"

	"google.golang.org/grpc"
)

var sigs chan os.Signal

func init() {
	sigs = make(chan os.Signal, 1)
	signal.Notify(sigs, syscall.SIGINT, syscall.SIGTERM)
}

func main() {
	wg := &sync.WaitGroup{}
	defer wg.Wait()

	ctx, cancel := context.WithCancel(context.Background())
	defer cancel()

	// gRPC endpoint
	wg.Add(1)
	go func() {
		defer wg.Done()
		server.RunGRPCServer(ctx, server.GRPCOptions{
			ServeAddr: os.Getenv("GRPC_BIND_ADDR"),
			Register: func(s *grpc.Server) {
				{{ .Name }}{{ .Version }}.{{ .Register }}(s, &{{ .Implementor }}{})
			},
		})
	}()

	fmt.Println("Running {{ .Name }} gRPC server at", os.Getenv("GRPC_BIND_ADDR"))

	<-sigs
}
`

// GwTpl string
var GwTpl = `// DO NOT EDIT. This file is generated.

package main

import (
	"app/idl/{{ .Name }}/{{ .Name }}{{ .Version }}"
	"app/pkg/server"
	"context"
	"fmt"
	"os"
	"os/signal"
	"sync"
	"syscall"

	"google.golang.org/grpc"
)

var sigs chan os.Signal

func init() {
	sigs = make(chan os.Signal, 1)
	signal.Notify(sigs, syscall.SIGINT, syscall.SIGTERM)
}

func main() {
	wg := &sync.WaitGroup{}
	defer wg.Wait()

	ctx, cancel := context.WithCancel(context.Background())
	defer cancel()

	// HTTP endpoint
	wg.Add(1)
	go func() {
		defer wg.Done()
		server.RunGatewayServer(ctx, server.GatewayOptions{
			ServeAddr: os.Getenv("HTTP_BIND_ADDR"),
			GRPCAddr:  os.Getenv("GRPC_DIAL_ADDR"),
			DialOpts:  []grpc.DialOption{grpc.WithInsecure()},
			Register:  {{ .Name }}{{ .Version }}.{{ .Register }},
		})
	}()

	fmt.Println("Running {{ .Name }} gateway server at", os.Getenv("HTTP_BIND_ADDR"))

	<-sigs
}
`

// DockerfileTemplate to run any server.
var DockerfileTemplate = `# DO NOT EDIT. This file is generated by app/cmd/tools/generator/main.go

# Extend gobuild which has predownloaded dependencies.
FROM grpc-tools/gobuild as build
WORKDIR /build
RUN go build -a -o bin/{{ .Bin }} cmd/{{ .Bin }}/main.go

# Create a single binary image.
FROM scratch as {{ .Bin }}
COPY --from=build /build/bin/{{ .Bin }} /{{ .Bin }}/{{ .Bin }}
CMD ["/{{ .Bin }}/{{ .Bin }}"]
`
