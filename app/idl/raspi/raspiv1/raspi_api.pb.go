// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: idl/raspi/raspiv1/raspi_api.proto

package raspiv1

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	grpc "google.golang.org/grpc"
	io "io"
	math "math"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type TempStreamRequest struct {
}

func (m *TempStreamRequest) Reset()      { *m = TempStreamRequest{} }
func (*TempStreamRequest) ProtoMessage() {}
func (*TempStreamRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3ff3456d932f796, []int{0}
}
func (m *TempStreamRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TempStreamRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TempStreamRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TempStreamRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TempStreamRequest.Merge(m, src)
}
func (m *TempStreamRequest) XXX_Size() int {
	return m.Size()
}
func (m *TempStreamRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TempStreamRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TempStreamRequest proto.InternalMessageInfo

func (*TempStreamRequest) XXX_MessageName() string {
	return "app.raspi.v1.TempStreamRequest"
}

type TempStreamResponse struct {
	Temp *Temperature `protobuf:"bytes,1,opt,name=temp,proto3" json:"temp,omitempty"`
}

func (m *TempStreamResponse) Reset()      { *m = TempStreamResponse{} }
func (*TempStreamResponse) ProtoMessage() {}
func (*TempStreamResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3ff3456d932f796, []int{1}
}
func (m *TempStreamResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TempStreamResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TempStreamResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TempStreamResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TempStreamResponse.Merge(m, src)
}
func (m *TempStreamResponse) XXX_Size() int {
	return m.Size()
}
func (m *TempStreamResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TempStreamResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TempStreamResponse proto.InternalMessageInfo

func (m *TempStreamResponse) GetTemp() *Temperature {
	if m != nil {
		return m.Temp
	}
	return nil
}

func (*TempStreamResponse) XXX_MessageName() string {
	return "app.raspi.v1.TempStreamResponse"
}

type RadiatorRequest struct {
}

func (m *RadiatorRequest) Reset()      { *m = RadiatorRequest{} }
func (*RadiatorRequest) ProtoMessage() {}
func (*RadiatorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3ff3456d932f796, []int{2}
}
func (m *RadiatorRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RadiatorRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RadiatorRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RadiatorRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RadiatorRequest.Merge(m, src)
}
func (m *RadiatorRequest) XXX_Size() int {
	return m.Size()
}
func (m *RadiatorRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RadiatorRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RadiatorRequest proto.InternalMessageInfo

func (*RadiatorRequest) XXX_MessageName() string {
	return "app.raspi.v1.RadiatorRequest"
}

type RadiatorResponse struct {
	Radi *Radiator `protobuf:"bytes,1,opt,name=radi,proto3" json:"radi,omitempty"`
}

func (m *RadiatorResponse) Reset()      { *m = RadiatorResponse{} }
func (*RadiatorResponse) ProtoMessage() {}
func (*RadiatorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3ff3456d932f796, []int{3}
}
func (m *RadiatorResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RadiatorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RadiatorResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RadiatorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RadiatorResponse.Merge(m, src)
}
func (m *RadiatorResponse) XXX_Size() int {
	return m.Size()
}
func (m *RadiatorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RadiatorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RadiatorResponse proto.InternalMessageInfo

func (m *RadiatorResponse) GetRadi() *Radiator {
	if m != nil {
		return m.Radi
	}
	return nil
}

func (*RadiatorResponse) XXX_MessageName() string {
	return "app.raspi.v1.RadiatorResponse"
}

type SetRadiatorRequest struct {
	Radi *Radiator `protobuf:"bytes,1,opt,name=radi,proto3" json:"radi,omitempty"`
}

func (m *SetRadiatorRequest) Reset()      { *m = SetRadiatorRequest{} }
func (*SetRadiatorRequest) ProtoMessage() {}
func (*SetRadiatorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3ff3456d932f796, []int{4}
}
func (m *SetRadiatorRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetRadiatorRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetRadiatorRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetRadiatorRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetRadiatorRequest.Merge(m, src)
}
func (m *SetRadiatorRequest) XXX_Size() int {
	return m.Size()
}
func (m *SetRadiatorRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetRadiatorRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetRadiatorRequest proto.InternalMessageInfo

func (m *SetRadiatorRequest) GetRadi() *Radiator {
	if m != nil {
		return m.Radi
	}
	return nil
}

func (*SetRadiatorRequest) XXX_MessageName() string {
	return "app.raspi.v1.SetRadiatorRequest"
}

type SetRadiatorResponse struct {
	Radi *Radiator `protobuf:"bytes,1,opt,name=radi,proto3" json:"radi,omitempty"`
}

func (m *SetRadiatorResponse) Reset()      { *m = SetRadiatorResponse{} }
func (*SetRadiatorResponse) ProtoMessage() {}
func (*SetRadiatorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3ff3456d932f796, []int{5}
}
func (m *SetRadiatorResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetRadiatorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetRadiatorResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetRadiatorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetRadiatorResponse.Merge(m, src)
}
func (m *SetRadiatorResponse) XXX_Size() int {
	return m.Size()
}
func (m *SetRadiatorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SetRadiatorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SetRadiatorResponse proto.InternalMessageInfo

func (m *SetRadiatorResponse) GetRadi() *Radiator {
	if m != nil {
		return m.Radi
	}
	return nil
}

func (*SetRadiatorResponse) XXX_MessageName() string {
	return "app.raspi.v1.SetRadiatorResponse"
}

type StatusRequest struct {
}

func (m *StatusRequest) Reset()      { *m = StatusRequest{} }
func (*StatusRequest) ProtoMessage() {}
func (*StatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3ff3456d932f796, []int{6}
}
func (m *StatusRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StatusRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatusRequest.Merge(m, src)
}
func (m *StatusRequest) XXX_Size() int {
	return m.Size()
}
func (m *StatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StatusRequest proto.InternalMessageInfo

func (*StatusRequest) XXX_MessageName() string {
	return "app.raspi.v1.StatusRequest"
}

type StatusResponse struct {
	Status *Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *StatusResponse) Reset()      { *m = StatusResponse{} }
func (*StatusResponse) ProtoMessage() {}
func (*StatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3ff3456d932f796, []int{7}
}
func (m *StatusResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StatusResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatusResponse.Merge(m, src)
}
func (m *StatusResponse) XXX_Size() int {
	return m.Size()
}
func (m *StatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StatusResponse proto.InternalMessageInfo

func (m *StatusResponse) GetStatus() *Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (*StatusResponse) XXX_MessageName() string {
	return "app.raspi.v1.StatusResponse"
}
func init() {
	proto.RegisterType((*TempStreamRequest)(nil), "app.raspi.v1.TempStreamRequest")
	golang_proto.RegisterType((*TempStreamRequest)(nil), "app.raspi.v1.TempStreamRequest")
	proto.RegisterType((*TempStreamResponse)(nil), "app.raspi.v1.TempStreamResponse")
	golang_proto.RegisterType((*TempStreamResponse)(nil), "app.raspi.v1.TempStreamResponse")
	proto.RegisterType((*RadiatorRequest)(nil), "app.raspi.v1.RadiatorRequest")
	golang_proto.RegisterType((*RadiatorRequest)(nil), "app.raspi.v1.RadiatorRequest")
	proto.RegisterType((*RadiatorResponse)(nil), "app.raspi.v1.RadiatorResponse")
	golang_proto.RegisterType((*RadiatorResponse)(nil), "app.raspi.v1.RadiatorResponse")
	proto.RegisterType((*SetRadiatorRequest)(nil), "app.raspi.v1.SetRadiatorRequest")
	golang_proto.RegisterType((*SetRadiatorRequest)(nil), "app.raspi.v1.SetRadiatorRequest")
	proto.RegisterType((*SetRadiatorResponse)(nil), "app.raspi.v1.SetRadiatorResponse")
	golang_proto.RegisterType((*SetRadiatorResponse)(nil), "app.raspi.v1.SetRadiatorResponse")
	proto.RegisterType((*StatusRequest)(nil), "app.raspi.v1.StatusRequest")
	golang_proto.RegisterType((*StatusRequest)(nil), "app.raspi.v1.StatusRequest")
	proto.RegisterType((*StatusResponse)(nil), "app.raspi.v1.StatusResponse")
	golang_proto.RegisterType((*StatusResponse)(nil), "app.raspi.v1.StatusResponse")
}

func init() { proto.RegisterFile("idl/raspi/raspiv1/raspi_api.proto", fileDescriptor_e3ff3456d932f796) }
func init() {
	golang_proto.RegisterFile("idl/raspi/raspiv1/raspi_api.proto", fileDescriptor_e3ff3456d932f796)
}

var fileDescriptor_e3ff3456d932f796 = []byte{
	// 611 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x94, 0xbd, 0x4f, 0x14, 0x4d,
	0x1c, 0xc7, 0x77, 0x1e, 0xde, 0x1e, 0x06, 0x01, 0x19, 0x8c, 0xd1, 0x13, 0xc6, 0xe5, 0x2a, 0x42,
	0xb8, 0xdd, 0x3b, 0x6c, 0x0c, 0x85, 0x11, 0xc1, 0xc2, 0x8e, 0x1c, 0x57, 0x19, 0x13, 0x1d, 0xf6,
	0x86, 0x61, 0x72, 0x7b, 0x33, 0xe3, 0xcc, 0xdc, 0x19, 0xad, 0x88, 0x8d, 0xad, 0xd1, 0xda, 0xc4,
	0xd2, 0x3f, 0xc1, 0x92, 0x92, 0x92, 0xc4, 0x86, 0xd2, 0xdb, 0xb5, 0xb0, 0xa4, 0x32, 0x96, 0x66,
	0x77, 0x07, 0xb9, 0xe3, 0xc5, 0x44, 0x9b, 0xdd, 0xc9, 0xf7, 0xf7, 0xdd, 0xcf, 0xef, 0x2d, 0x3b,
	0x70, 0x81, 0x37, 0xe3, 0x50, 0x13, 0xa3, 0x78, 0xf1, 0xec, 0xd6, 0x8a, 0xf7, 0x53, 0xa2, 0x78,
	0xa0, 0xb4, 0xb4, 0x12, 0x5d, 0x21, 0x4a, 0x05, 0xb9, 0x18, 0x74, 0x6b, 0xa5, 0xe5, 0x5c, 0x8c,
	0x2a, 0x8c, 0x8a, 0x8a, 0x79, 0x41, 0x18, 0xa3, 0x3a, 0x94, 0xca, 0x72, 0x29, 0x4c, 0x48, 0x84,
	0x90, 0x96, 0xe4, 0xe7, 0xe2, 0xdb, 0xd2, 0x1c, 0x93, 0x92, 0xc5, 0x34, 0x24, 0x8a, 0x5f, 0x10,
	0x85, 0x4c, 0x32, 0xe9, 0xce, 0xf3, 0xe7, 0x0b, 0xb1, 0x2f, 0x15, 0x75, 0xd6, 0xf2, 0x2c, 0x9c,
	0x69, 0xd0, 0xb6, 0xda, 0xb2, 0x9a, 0x92, 0x76, 0x9d, 0x3e, 0xef, 0x50, 0x63, 0xcb, 0xeb, 0x10,
	0xf5, 0x8b, 0x46, 0x49, 0x61, 0x28, 0xaa, 0xc0, 0x61, 0x4b, 0xdb, 0xea, 0x06, 0xf0, 0xc1, 0xe2,
	0xc4, 0xca, 0xcd, 0xa0, 0xbf, 0xfc, 0x20, 0xf3, 0x53, 0x4d, 0x6c, 0x47, 0xd3, 0x7a, 0x6e, 0x2b,
	0xcf, 0xc0, 0xe9, 0x3a, 0x69, 0x72, 0x62, 0xa5, 0x3e, 0xe1, 0xde, 0x83, 0x57, 0x4f, 0x25, 0x47,
	0x5d, 0x82, 0xc3, 0x9a, 0x34, 0xb9, 0xa3, 0x5e, 0x1f, 0xa4, 0xfe, 0x76, 0xe7, 0x9e, 0xf2, 0x7d,
	0x88, 0xb6, 0xa8, 0x3d, 0x43, 0xfd, 0x2b, 0xc2, 0x1a, 0x9c, 0x1d, 0x20, 0xfc, 0x43, 0x11, 0xd3,
	0x70, 0x72, 0xcb, 0x12, 0xdb, 0x31, 0xa7, 0x5d, 0x4d, 0x9d, 0x08, 0x0e, 0xb7, 0x0c, 0x47, 0x4d,
	0xae, 0x38, 0xe0, 0xb5, 0x41, 0xa0, 0x73, 0x3b, 0xcf, 0xca, 0x9b, 0x21, 0xf8, 0x7f, 0x3d, 0x8b,
	0xad, 0x6d, 0x3e, 0x42, 0xcf, 0x20, 0x3c, 0x1d, 0x3d, 0xba, 0x7d, 0x7e, 0xc8, 0x03, 0x9b, 0x2a,
	0xf9, 0x97, 0x1b, 0x8a, 0x5a, 0xca, 0x93, 0xaf, 0xbf, 0x7c, 0x7b, 0xff, 0xdf, 0x18, 0x1a, 0x09,
	0xb3, 0xad, 0x54, 0x01, 0x7a, 0x92, 0x65, 0x2b, 0x3a, 0x42, 0xf3, 0x97, 0x74, 0xea, 0xe8, 0xf8,
	0xb2, 0xb0, 0x63, 0xcf, 0xe4, 0xec, 0x09, 0x34, 0x1e, 0xea, 0x13, 0x22, 0x85, 0x13, 0x7d, 0x03,
	0x46, 0x67, 0xea, 0x3b, 0xbf, 0xbd, 0xd2, 0xc2, 0x1f, 0x1c, 0x83, 0x69, 0xca, 0x7d, 0x69, 0x1a,
	0x70, 0xb4, 0x98, 0x22, 0xba, 0x75, 0xe1, 0x6c, 0x1d, 0x7c, 0xee, 0xe2, 0xa0, 0xe3, 0x4e, 0xe7,
	0xdc, 0x71, 0x34, 0x16, 0x16, 0x9b, 0x78, 0xf0, 0x03, 0xbc, 0x5b, 0xfb, 0x00, 0xd0, 0xc8, 0xca,
	0x50, 0x2d, 0xa8, 0x96, 0xa6, 0x62, 0x19, 0x91, 0x78, 0x57, 0x1a, 0xbb, 0x7a, 0xb7, 0x5a, 0xad,
	0x2d, 0x01, 0xa0, 0xf7, 0x00, 0x6c, 0x6c, 0xc8, 0xa8, 0x45, 0x35, 0x7f, 0x45, 0x9b, 0xfe, 0x06,
	0xed, 0xd2, 0x58, 0xaa, 0x36, 0x15, 0xd6, 0x7f, 0x28, 0xba, 0x5c, 0x4b, 0x91, 0x9f, 0x89, 0x68,
	0xfa, 0x0d, 0x29, 0x63, 0xe3, 0xef, 0x48, 0xed, 0xef, 0x74, 0xe2, 0xb8, 0x62, 0x2c, 0x89, 0x5a,
	0x3e, 0xab, 0x6f, 0xae, 0xfb, 0x86, 0xea, 0x2e, 0x8f, 0xa8, 0xcf, 0xa8, 0xc8, 0xfe, 0x18, 0x2e,
	0x45, 0x80, 0x16, 0x77, 0xad, 0x55, 0x66, 0x35, 0x0c, 0x19, 0xb7, 0xbb, 0x9d, 0xed, 0x20, 0x92,
	0xed, 0xb0, 0x4d, 0x98, 0xe8, 0x98, 0x96, 0x6c, 0xb5, 0x42, 0xa6, 0x55, 0x54, 0xb1, 0x19, 0xf1,
	0xb0, 0x87, 0xbd, 0xa3, 0x1e, 0xf6, 0x8e, 0x7b, 0x18, 0xfc, 0xec, 0x61, 0xb0, 0x97, 0x60, 0xf0,
	0x29, 0xc1, 0xe0, 0x73, 0x82, 0xc1, 0x7e, 0x82, 0xc1, 0x41, 0x82, 0xc1, 0x61, 0x82, 0xc1, 0xd7,
	0x04, 0x83, 0xef, 0x09, 0xf6, 0x8e, 0x13, 0x0c, 0xde, 0xa6, 0xd8, 0xfb, 0x98, 0x62, 0x6f, 0x3f,
	0xc5, 0xe0, 0x20, 0xc5, 0xe0, 0x30, 0xc5, 0xde, 0x51, 0x8a, 0xbd, 0xc7, 0x63, 0xee, 0x46, 0xd8,
	0x1e, 0xcd, 0x2f, 0x83, 0x3b, 0xbf, 0x02, 0x00, 0x00, 0xff, 0xff, 0x18, 0xb8, 0xe0, 0x23, 0xb6,
	0x04, 0x00, 0x00,
}

func (this *TempStreamRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TempStreamRequest)
	if !ok {
		that2, ok := that.(TempStreamRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *TempStreamResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TempStreamResponse)
	if !ok {
		that2, ok := that.(TempStreamResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Temp.Equal(that1.Temp) {
		return false
	}
	return true
}
func (this *RadiatorRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RadiatorRequest)
	if !ok {
		that2, ok := that.(RadiatorRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *RadiatorResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RadiatorResponse)
	if !ok {
		that2, ok := that.(RadiatorResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Radi.Equal(that1.Radi) {
		return false
	}
	return true
}
func (this *SetRadiatorRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SetRadiatorRequest)
	if !ok {
		that2, ok := that.(SetRadiatorRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Radi.Equal(that1.Radi) {
		return false
	}
	return true
}
func (this *SetRadiatorResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SetRadiatorResponse)
	if !ok {
		that2, ok := that.(SetRadiatorResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Radi.Equal(that1.Radi) {
		return false
	}
	return true
}
func (this *StatusRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StatusRequest)
	if !ok {
		that2, ok := that.(StatusRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *StatusResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StatusResponse)
	if !ok {
		that2, ok := that.(StatusResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Status.Equal(that1.Status) {
		return false
	}
	return true
}
func (this *TempStreamRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&raspiv1.TempStreamRequest{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TempStreamResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&raspiv1.TempStreamResponse{")
	if this.Temp != nil {
		s = append(s, "Temp: "+fmt.Sprintf("%#v", this.Temp)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RadiatorRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&raspiv1.RadiatorRequest{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RadiatorResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&raspiv1.RadiatorResponse{")
	if this.Radi != nil {
		s = append(s, "Radi: "+fmt.Sprintf("%#v", this.Radi)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SetRadiatorRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&raspiv1.SetRadiatorRequest{")
	if this.Radi != nil {
		s = append(s, "Radi: "+fmt.Sprintf("%#v", this.Radi)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SetRadiatorResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&raspiv1.SetRadiatorResponse{")
	if this.Radi != nil {
		s = append(s, "Radi: "+fmt.Sprintf("%#v", this.Radi)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *StatusRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&raspiv1.StatusRequest{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *StatusResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&raspiv1.StatusResponse{")
	if this.Status != nil {
		s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringRaspiApi(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RaspiAPIClient is the client API for RaspiAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RaspiAPIClient interface {
	// Stream temperature data.
	TempStream(ctx context.Context, in *TempStreamRequest, opts ...grpc.CallOption) (RaspiAPI_TempStreamClient, error)
	// Fetch radiator data.
	Radiator(ctx context.Context, in *RadiatorRequest, opts ...grpc.CallOption) (*RadiatorResponse, error)
	// Set radiator.
	SetRadiator(ctx context.Context, in *SetRadiatorRequest, opts ...grpc.CallOption) (*SetRadiatorResponse, error)
	// Get status of whole system.
	Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error)
}

type raspiAPIClient struct {
	cc *grpc.ClientConn
}

func NewRaspiAPIClient(cc *grpc.ClientConn) RaspiAPIClient {
	return &raspiAPIClient{cc}
}

func (c *raspiAPIClient) TempStream(ctx context.Context, in *TempStreamRequest, opts ...grpc.CallOption) (RaspiAPI_TempStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_RaspiAPI_serviceDesc.Streams[0], "/app.raspi.v1.RaspiAPI/TempStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &raspiAPITempStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RaspiAPI_TempStreamClient interface {
	Recv() (*TempStreamResponse, error)
	grpc.ClientStream
}

type raspiAPITempStreamClient struct {
	grpc.ClientStream
}

func (x *raspiAPITempStreamClient) Recv() (*TempStreamResponse, error) {
	m := new(TempStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *raspiAPIClient) Radiator(ctx context.Context, in *RadiatorRequest, opts ...grpc.CallOption) (*RadiatorResponse, error) {
	out := new(RadiatorResponse)
	err := c.cc.Invoke(ctx, "/app.raspi.v1.RaspiAPI/Radiator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raspiAPIClient) SetRadiator(ctx context.Context, in *SetRadiatorRequest, opts ...grpc.CallOption) (*SetRadiatorResponse, error) {
	out := new(SetRadiatorResponse)
	err := c.cc.Invoke(ctx, "/app.raspi.v1.RaspiAPI/SetRadiator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raspiAPIClient) Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/app.raspi.v1.RaspiAPI/Status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RaspiAPIServer is the server API for RaspiAPI service.
type RaspiAPIServer interface {
	// Stream temperature data.
	TempStream(*TempStreamRequest, RaspiAPI_TempStreamServer) error
	// Fetch radiator data.
	Radiator(context.Context, *RadiatorRequest) (*RadiatorResponse, error)
	// Set radiator.
	SetRadiator(context.Context, *SetRadiatorRequest) (*SetRadiatorResponse, error)
	// Get status of whole system.
	Status(context.Context, *StatusRequest) (*StatusResponse, error)
}

func RegisterRaspiAPIServer(s *grpc.Server, srv RaspiAPIServer) {
	s.RegisterService(&_RaspiAPI_serviceDesc, srv)
}

func _RaspiAPI_TempStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TempStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RaspiAPIServer).TempStream(m, &raspiAPITempStreamServer{stream})
}

type RaspiAPI_TempStreamServer interface {
	Send(*TempStreamResponse) error
	grpc.ServerStream
}

type raspiAPITempStreamServer struct {
	grpc.ServerStream
}

func (x *raspiAPITempStreamServer) Send(m *TempStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _RaspiAPI_Radiator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RadiatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaspiAPIServer).Radiator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.raspi.v1.RaspiAPI/Radiator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaspiAPIServer).Radiator(ctx, req.(*RadiatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RaspiAPI_SetRadiator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRadiatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaspiAPIServer).SetRadiator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.raspi.v1.RaspiAPI/SetRadiator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaspiAPIServer).SetRadiator(ctx, req.(*SetRadiatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RaspiAPI_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaspiAPIServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.raspi.v1.RaspiAPI/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaspiAPIServer).Status(ctx, req.(*StatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RaspiAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "app.raspi.v1.RaspiAPI",
	HandlerType: (*RaspiAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Radiator",
			Handler:    _RaspiAPI_Radiator_Handler,
		},
		{
			MethodName: "SetRadiator",
			Handler:    _RaspiAPI_SetRadiator_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _RaspiAPI_Status_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "TempStream",
			Handler:       _RaspiAPI_TempStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "idl/raspi/raspiv1/raspi_api.proto",
}

func (m *TempStreamRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TempStreamRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *TempStreamResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TempStreamResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Temp != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRaspiApi(dAtA, i, uint64(m.Temp.Size()))
		n1, err := m.Temp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *RadiatorRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RadiatorRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *RadiatorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RadiatorResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Radi != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRaspiApi(dAtA, i, uint64(m.Radi.Size()))
		n2, err := m.Radi.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *SetRadiatorRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetRadiatorRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Radi != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRaspiApi(dAtA, i, uint64(m.Radi.Size()))
		n3, err := m.Radi.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *SetRadiatorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetRadiatorResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Radi != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRaspiApi(dAtA, i, uint64(m.Radi.Size()))
		n4, err := m.Radi.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func (m *StatusRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StatusRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *StatusResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StatusResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRaspiApi(dAtA, i, uint64(m.Status.Size()))
		n5, err := m.Status.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}

func encodeVarintRaspiApi(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedTempStreamRequest(r randyRaspiApi, easy bool) *TempStreamRequest {
	this := &TempStreamRequest{}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedTempStreamResponse(r randyRaspiApi, easy bool) *TempStreamResponse {
	this := &TempStreamResponse{}
	if r.Intn(10) != 0 {
		this.Temp = NewPopulatedTemperature(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedRadiatorRequest(r randyRaspiApi, easy bool) *RadiatorRequest {
	this := &RadiatorRequest{}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedRadiatorResponse(r randyRaspiApi, easy bool) *RadiatorResponse {
	this := &RadiatorResponse{}
	if r.Intn(10) != 0 {
		this.Radi = NewPopulatedRadiator(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSetRadiatorRequest(r randyRaspiApi, easy bool) *SetRadiatorRequest {
	this := &SetRadiatorRequest{}
	if r.Intn(10) != 0 {
		this.Radi = NewPopulatedRadiator(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSetRadiatorResponse(r randyRaspiApi, easy bool) *SetRadiatorResponse {
	this := &SetRadiatorResponse{}
	if r.Intn(10) != 0 {
		this.Radi = NewPopulatedRadiator(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedStatusRequest(r randyRaspiApi, easy bool) *StatusRequest {
	this := &StatusRequest{}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedStatusResponse(r randyRaspiApi, easy bool) *StatusResponse {
	this := &StatusResponse{}
	if r.Intn(10) != 0 {
		this.Status = NewPopulatedStatus(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyRaspiApi interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneRaspiApi(r randyRaspiApi) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringRaspiApi(r randyRaspiApi) string {
	v1 := r.Intn(100)
	tmps := make([]rune, v1)
	for i := 0; i < v1; i++ {
		tmps[i] = randUTF8RuneRaspiApi(r)
	}
	return string(tmps)
}
func randUnrecognizedRaspiApi(r randyRaspiApi, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldRaspiApi(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldRaspiApi(dAtA []byte, r randyRaspiApi, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateRaspiApi(dAtA, uint64(key))
		v2 := r.Int63()
		if r.Intn(2) == 0 {
			v2 *= -1
		}
		dAtA = encodeVarintPopulateRaspiApi(dAtA, uint64(v2))
	case 1:
		dAtA = encodeVarintPopulateRaspiApi(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateRaspiApi(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateRaspiApi(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateRaspiApi(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateRaspiApi(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *TempStreamRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *TempStreamResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Temp != nil {
		l = m.Temp.Size()
		n += 1 + l + sovRaspiApi(uint64(l))
	}
	return n
}

func (m *RadiatorRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RadiatorResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Radi != nil {
		l = m.Radi.Size()
		n += 1 + l + sovRaspiApi(uint64(l))
	}
	return n
}

func (m *SetRadiatorRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Radi != nil {
		l = m.Radi.Size()
		n += 1 + l + sovRaspiApi(uint64(l))
	}
	return n
}

func (m *SetRadiatorResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Radi != nil {
		l = m.Radi.Size()
		n += 1 + l + sovRaspiApi(uint64(l))
	}
	return n
}

func (m *StatusRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *StatusResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovRaspiApi(uint64(l))
	}
	return n
}

func sovRaspiApi(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozRaspiApi(x uint64) (n int) {
	return sovRaspiApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *TempStreamRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TempStreamRequest{`,
		`}`,
	}, "")
	return s
}
func (this *TempStreamResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TempStreamResponse{`,
		`Temp:` + strings.Replace(fmt.Sprintf("%v", this.Temp), "Temperature", "Temperature", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RadiatorRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RadiatorRequest{`,
		`}`,
	}, "")
	return s
}
func (this *RadiatorResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RadiatorResponse{`,
		`Radi:` + strings.Replace(fmt.Sprintf("%v", this.Radi), "Radiator", "Radiator", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SetRadiatorRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SetRadiatorRequest{`,
		`Radi:` + strings.Replace(fmt.Sprintf("%v", this.Radi), "Radiator", "Radiator", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SetRadiatorResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SetRadiatorResponse{`,
		`Radi:` + strings.Replace(fmt.Sprintf("%v", this.Radi), "Radiator", "Radiator", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StatusRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StatusRequest{`,
		`}`,
	}, "")
	return s
}
func (this *StatusResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StatusResponse{`,
		`Status:` + strings.Replace(fmt.Sprintf("%v", this.Status), "Status", "Status", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringRaspiApi(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *TempStreamRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaspiApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TempStreamRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TempStreamRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRaspiApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaspiApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRaspiApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TempStreamResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaspiApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TempStreamResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TempStreamResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Temp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaspiApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaspiApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaspiApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Temp == nil {
				m.Temp = &Temperature{}
			}
			if err := m.Temp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRaspiApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaspiApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRaspiApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RadiatorRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaspiApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RadiatorRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RadiatorRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRaspiApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaspiApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRaspiApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RadiatorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaspiApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RadiatorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RadiatorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Radi", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaspiApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaspiApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaspiApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Radi == nil {
				m.Radi = &Radiator{}
			}
			if err := m.Radi.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRaspiApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaspiApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRaspiApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetRadiatorRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaspiApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetRadiatorRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetRadiatorRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Radi", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaspiApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaspiApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaspiApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Radi == nil {
				m.Radi = &Radiator{}
			}
			if err := m.Radi.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRaspiApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaspiApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRaspiApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetRadiatorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaspiApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetRadiatorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetRadiatorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Radi", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaspiApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaspiApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaspiApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Radi == nil {
				m.Radi = &Radiator{}
			}
			if err := m.Radi.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRaspiApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaspiApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRaspiApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StatusRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaspiApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StatusRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StatusRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRaspiApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaspiApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRaspiApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StatusResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaspiApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StatusResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StatusResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaspiApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaspiApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaspiApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &Status{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRaspiApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaspiApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRaspiApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRaspiApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRaspiApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRaspiApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRaspiApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRaspiApi
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthRaspiApi
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowRaspiApi
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipRaspiApi(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthRaspiApi
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthRaspiApi = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRaspiApi   = fmt.Errorf("proto: integer overflow")
)
