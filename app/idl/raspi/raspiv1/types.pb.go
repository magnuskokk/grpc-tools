// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: idl/raspi/raspiv1/types.proto

package raspiv1

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Temperature reading.
type Temperature struct {
	Reading int32 `protobuf:"zigzag32,1,opt,name=reading,proto3" json:"reading,omitempty"`
}

func (m *Temperature) Reset()      { *m = Temperature{} }
func (*Temperature) ProtoMessage() {}
func (*Temperature) Descriptor() ([]byte, []int) {
	return fileDescriptor_30d097ddeac4bab5, []int{0}
}
func (m *Temperature) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Temperature) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Temperature.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Temperature) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Temperature.Merge(m, src)
}
func (m *Temperature) XXX_Size() int {
	return m.Size()
}
func (m *Temperature) XXX_DiscardUnknown() {
	xxx_messageInfo_Temperature.DiscardUnknown(m)
}

var xxx_messageInfo_Temperature proto.InternalMessageInfo

func (m *Temperature) GetReading() int32 {
	if m != nil {
		return m.Reading
	}
	return 0
}

func (*Temperature) XXX_MessageName() string {
	return "app.raspi.v1.Temperature"
}

// Radiator data.
type Radiator struct {
	Enabled bool   `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Level   uint32 `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`
}

func (m *Radiator) Reset()      { *m = Radiator{} }
func (*Radiator) ProtoMessage() {}
func (*Radiator) Descriptor() ([]byte, []int) {
	return fileDescriptor_30d097ddeac4bab5, []int{1}
}
func (m *Radiator) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Radiator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Radiator.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Radiator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Radiator.Merge(m, src)
}
func (m *Radiator) XXX_Size() int {
	return m.Size()
}
func (m *Radiator) XXX_DiscardUnknown() {
	xxx_messageInfo_Radiator.DiscardUnknown(m)
}

var xxx_messageInfo_Radiator proto.InternalMessageInfo

func (m *Radiator) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *Radiator) GetLevel() uint32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (*Radiator) XXX_MessageName() string {
	return "app.raspi.v1.Radiator"
}

// Combined status.
type Status struct {
	Temperature *Temperature `protobuf:"bytes,1,opt,name=temperature,proto3" json:"temperature,omitempty"`
	Radiator    *Radiator    `protobuf:"bytes,2,opt,name=radiator,proto3" json:"radiator,omitempty"`
}

func (m *Status) Reset()      { *m = Status{} }
func (*Status) ProtoMessage() {}
func (*Status) Descriptor() ([]byte, []int) {
	return fileDescriptor_30d097ddeac4bab5, []int{2}
}
func (m *Status) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Status) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Status.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Status) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Status.Merge(m, src)
}
func (m *Status) XXX_Size() int {
	return m.Size()
}
func (m *Status) XXX_DiscardUnknown() {
	xxx_messageInfo_Status.DiscardUnknown(m)
}

var xxx_messageInfo_Status proto.InternalMessageInfo

func (m *Status) GetTemperature() *Temperature {
	if m != nil {
		return m.Temperature
	}
	return nil
}

func (m *Status) GetRadiator() *Radiator {
	if m != nil {
		return m.Radiator
	}
	return nil
}

func (*Status) XXX_MessageName() string {
	return "app.raspi.v1.Status"
}
func init() {
	proto.RegisterType((*Temperature)(nil), "app.raspi.v1.Temperature")
	golang_proto.RegisterType((*Temperature)(nil), "app.raspi.v1.Temperature")
	proto.RegisterType((*Radiator)(nil), "app.raspi.v1.Radiator")
	golang_proto.RegisterType((*Radiator)(nil), "app.raspi.v1.Radiator")
	proto.RegisterType((*Status)(nil), "app.raspi.v1.Status")
	golang_proto.RegisterType((*Status)(nil), "app.raspi.v1.Status")
}

func init() { proto.RegisterFile("idl/raspi/raspiv1/types.proto", fileDescriptor_30d097ddeac4bab5) }
func init() {
	golang_proto.RegisterFile("idl/raspi/raspiv1/types.proto", fileDescriptor_30d097ddeac4bab5)
}

var fileDescriptor_30d097ddeac4bab5 = []byte{
	// 288 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x90, 0xb1, 0x4e, 0xc3, 0x30,
	0x10, 0x86, 0x7d, 0x48, 0xb4, 0x91, 0x03, 0x03, 0x11, 0x42, 0x01, 0x89, 0x53, 0x95, 0x85, 0x4e,
	0xa9, 0x1a, 0x36, 0xd8, 0x78, 0x04, 0x03, 0x0b, 0x9b, 0xab, 0x58, 0x51, 0xa4, 0xd0, 0x58, 0x8e,
	0x1b, 0xa9, 0x1b, 0x8f, 0xc0, 0x23, 0x30, 0xf2, 0x08, 0x8c, 0x1d, 0x3b, 0x66, 0xec, 0x48, 0xec,
	0x85, 0xb1, 0x23, 0x23, 0x22, 0x69, 0x20, 0x5d, 0x2c, 0xfd, 0xba, 0xef, 0x7c, 0x9f, 0x7e, 0x7a,
	0x99, 0xc6, 0xd9, 0x44, 0xf1, 0x42, 0xa6, 0xed, 0x5b, 0x4e, 0x27, 0x7a, 0x29, 0x45, 0x11, 0x4a,
	0x95, 0xeb, 0xdc, 0x3b, 0xe2, 0x52, 0x86, 0xcd, 0x20, 0x2c, 0xa7, 0x17, 0x34, 0xc9, 0x93, 0xbc,
	0x9d, 0x04, 0x57, 0xd4, 0x7d, 0x10, 0xcf, 0x52, 0x28, 0xae, 0x17, 0x4a, 0x78, 0x3e, 0x1d, 0x2a,
	0xc1, 0xe3, 0x74, 0x9e, 0xf8, 0x30, 0x82, 0xf1, 0x09, 0xeb, 0x62, 0x70, 0x43, 0x1d, 0xc6, 0xe3,
	0x94, 0xeb, 0x5c, 0xfd, 0x52, 0x62, 0xce, 0x67, 0x99, 0x88, 0x1b, 0xca, 0x61, 0x5d, 0xf4, 0x4e,
	0xe9, 0x61, 0x26, 0x4a, 0x91, 0xf9, 0x07, 0x23, 0x18, 0x1f, 0xb3, 0x36, 0x04, 0x4b, 0x3a, 0xb8,
	0xd7, 0x5c, 0x2f, 0x0a, 0xef, 0x96, 0xba, 0xfa, 0xff, 0x5c, 0xb3, 0xed, 0x46, 0xe7, 0x61, 0x5f,
	0x2f, 0xec, 0xf9, 0xb0, 0x3e, 0xed, 0x45, 0xd4, 0x51, 0x3b, 0x85, 0xe6, 0x7f, 0x37, 0x3a, 0xdb,
	0xdf, 0xec, 0x04, 0xd9, 0x1f, 0x77, 0xf7, 0x58, 0xd5, 0x48, 0x36, 0x35, 0x92, 0x6d, 0x8d, 0xf0,
	0x5d, 0x23, 0xbc, 0x18, 0x84, 0x77, 0x83, 0xf0, 0x61, 0x10, 0x56, 0x06, 0x61, 0x6d, 0x10, 0x2a,
	0x83, 0xf0, 0x69, 0x10, 0xbe, 0x0c, 0x92, 0xad, 0x41, 0x78, 0xb5, 0x48, 0xde, 0x2c, 0x92, 0x95,
	0x45, 0x58, 0x5b, 0x84, 0xca, 0x22, 0xd9, 0x58, 0x24, 0x4f, 0xc3, 0x5d, 0xb9, 0xb3, 0x41, 0xd3,
	0xde, 0xf5, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xd1, 0x26, 0x94, 0xdd, 0x78, 0x01, 0x00, 0x00,
}

func (this *Temperature) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Temperature)
	if !ok {
		that2, ok := that.(Temperature)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Reading != that1.Reading {
		return false
	}
	return true
}
func (this *Radiator) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Radiator)
	if !ok {
		that2, ok := that.(Radiator)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Enabled != that1.Enabled {
		return false
	}
	if this.Level != that1.Level {
		return false
	}
	return true
}
func (this *Status) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Status)
	if !ok {
		that2, ok := that.(Status)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Temperature.Equal(that1.Temperature) {
		return false
	}
	if !this.Radiator.Equal(that1.Radiator) {
		return false
	}
	return true
}
func (this *Temperature) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&raspiv1.Temperature{")
	s = append(s, "Reading: "+fmt.Sprintf("%#v", this.Reading)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Radiator) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&raspiv1.Radiator{")
	s = append(s, "Enabled: "+fmt.Sprintf("%#v", this.Enabled)+",\n")
	s = append(s, "Level: "+fmt.Sprintf("%#v", this.Level)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Status) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&raspiv1.Status{")
	if this.Temperature != nil {
		s = append(s, "Temperature: "+fmt.Sprintf("%#v", this.Temperature)+",\n")
	}
	if this.Radiator != nil {
		s = append(s, "Radiator: "+fmt.Sprintf("%#v", this.Radiator)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringTypes(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Temperature) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Temperature) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Reading != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTypes(dAtA, i, uint64((uint32(m.Reading)<<1)^uint32((m.Reading>>31))))
	}
	return i, nil
}

func (m *Radiator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Radiator) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Enabled {
		dAtA[i] = 0x8
		i++
		if m.Enabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Level != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Level))
	}
	return i, nil
}

func (m *Status) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Status) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Temperature != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Temperature.Size()))
		n1, err := m.Temperature.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Radiator != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTypes(dAtA, i, uint64(m.Radiator.Size()))
		n2, err := m.Radiator.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedTemperature(r randyTypes, easy bool) *Temperature {
	this := &Temperature{}
	this.Reading = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Reading *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedRadiator(r randyTypes, easy bool) *Radiator {
	this := &Radiator{}
	this.Enabled = bool(bool(r.Intn(2) == 0))
	this.Level = uint32(r.Uint32())
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedStatus(r randyTypes, easy bool) *Status {
	this := &Status{}
	if r.Intn(10) != 0 {
		this.Temperature = NewPopulatedTemperature(r, easy)
	}
	if r.Intn(10) != 0 {
		this.Radiator = NewPopulatedRadiator(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyTypes interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneTypes(r randyTypes) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringTypes(r randyTypes) string {
	v1 := r.Intn(100)
	tmps := make([]rune, v1)
	for i := 0; i < v1; i++ {
		tmps[i] = randUTF8RuneTypes(r)
	}
	return string(tmps)
}
func randUnrecognizedTypes(r randyTypes, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldTypes(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldTypes(dAtA []byte, r randyTypes, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateTypes(dAtA, uint64(key))
		v2 := r.Int63()
		if r.Intn(2) == 0 {
			v2 *= -1
		}
		dAtA = encodeVarintPopulateTypes(dAtA, uint64(v2))
	case 1:
		dAtA = encodeVarintPopulateTypes(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateTypes(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateTypes(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateTypes(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateTypes(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *Temperature) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Reading != 0 {
		n += 1 + sozTypes(uint64(m.Reading))
	}
	return n
}

func (m *Radiator) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Enabled {
		n += 2
	}
	if m.Level != 0 {
		n += 1 + sovTypes(uint64(m.Level))
	}
	return n
}

func (m *Status) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Temperature != nil {
		l = m.Temperature.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Radiator != nil {
		l = m.Radiator.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Temperature) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Temperature{`,
		`Reading:` + fmt.Sprintf("%v", this.Reading) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Radiator) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Radiator{`,
		`Enabled:` + fmt.Sprintf("%v", this.Enabled) + `,`,
		`Level:` + fmt.Sprintf("%v", this.Level) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Status) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Status{`,
		`Temperature:` + strings.Replace(fmt.Sprintf("%v", this.Temperature), "Temperature", "Temperature", 1) + `,`,
		`Radiator:` + strings.Replace(fmt.Sprintf("%v", this.Radiator), "Radiator", "Radiator", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTypes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Temperature) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Temperature: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Temperature: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reading", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Reading = v
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Radiator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Radiator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Radiator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enabled = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Status) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Status: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Status: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Temperature", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Temperature == nil {
				m.Temperature = &Temperature{}
			}
			if err := m.Temperature.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Radiator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Radiator == nil {
				m.Radiator = &Radiator{}
			}
			if err := m.Radiator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthTypes
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTypes(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthTypes
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTypes = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes   = fmt.Errorf("proto: integer overflow")
)
