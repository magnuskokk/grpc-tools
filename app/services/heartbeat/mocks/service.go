// Code generated by MockGen. DO NOT EDIT.
// Source: app/services/heartbeat (interfaces: ServiceServer)

// Package mocks is a generated GoMock package.
package mocks

import (
	heartbeat "app/services/heartbeat"
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockServiceServer is a mock of ServiceServer interface
type MockServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockServiceServerMockRecorder
}

// MockServiceServerMockRecorder is the mock recorder for MockServiceServer
type MockServiceServerMockRecorder struct {
	mock *MockServiceServer
}

// NewMockServiceServer creates a new mock instance
func NewMockServiceServer(ctrl *gomock.Controller) *MockServiceServer {
	mock := &MockServiceServer{ctrl: ctrl}
	mock.recorder = &MockServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockServiceServer) EXPECT() *MockServiceServerMockRecorder {
	return m.recorder
}

// Echo mocks base method
func (m *MockServiceServer) Echo(arg0 context.Context, arg1 *heartbeat.EchoRequest) (*heartbeat.EchoRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Echo", arg0, arg1)
	ret0, _ := ret[0].(*heartbeat.EchoRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Echo indicates an expected call of Echo
func (mr *MockServiceServerMockRecorder) Echo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Echo", reflect.TypeOf((*MockServiceServer)(nil).Echo), arg0, arg1)
}

// Ping mocks base method
func (m *MockServiceServer) Ping(arg0 context.Context, arg1 *heartbeat.PingRequest) (*heartbeat.PingReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", arg0, arg1)
	ret0, _ := ret[0].(*heartbeat.PingReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Ping indicates an expected call of Ping
func (mr *MockServiceServerMockRecorder) Ping(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockServiceServer)(nil).Ping), arg0, arg1)
}

// Stream mocks base method
func (m *MockServiceServer) Stream(arg0 *heartbeat.StreamRequest, arg1 heartbeat.Service_StreamServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stream", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Stream indicates an expected call of Stream
func (mr *MockServiceServerMockRecorder) Stream(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stream", reflect.TypeOf((*MockServiceServer)(nil).Stream), arg0, arg1)
}
