// Code generated by MockGen. DO NOT EDIT.
// Source: app/services/echo (interfaces: EchoServiceServer)

// Package mocks is a generated GoMock package.
package mocks

import (
	echo "app/services/echo"
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockEchoServiceServer is a mock of EchoServiceServer interface
type MockEchoServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockEchoServiceServerMockRecorder
}

// MockEchoServiceServerMockRecorder is the mock recorder for MockEchoServiceServer
type MockEchoServiceServerMockRecorder struct {
	mock *MockEchoServiceServer
}

// NewMockEchoServiceServer creates a new mock instance
func NewMockEchoServiceServer(ctrl *gomock.Controller) *MockEchoServiceServer {
	mock := &MockEchoServiceServer{ctrl: ctrl}
	mock.recorder = &MockEchoServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEchoServiceServer) EXPECT() *MockEchoServiceServerMockRecorder {
	return m.recorder
}

// Echo mocks base method
func (m *MockEchoServiceServer) Echo(arg0 context.Context, arg1 *echo.EchoRequest) (*echo.EchoRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Echo", arg0, arg1)
	ret0, _ := ret[0].(*echo.EchoRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Echo indicates an expected call of Echo
func (mr *MockEchoServiceServerMockRecorder) Echo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Echo", reflect.TypeOf((*MockEchoServiceServer)(nil).Echo), arg0, arg1)
}
