options:
  uid:
    usage: User ID for local images.
    default:
      command: id -u
  gid:
    usage: Group ID for local images.
    default: 65535
  user:
    usage: Username for local images.
    default:
      command: id -un
  group:
    usage: Group name for local images.
    description: Same as user name.
    default:
      command: id -un

tasks:
  docker.down:
    usage: Stop all containers. All docker.* commands include only services defined in docker-compose.yml file.
    run:
      - command: docker-compose -f docker-compose.yml -f docker-compose.tools.yml down

  docker.clean.containers:
    usage: Stop and remove all containers, images and any anonymous volumes attached to containers.
    run:
      - command: docker-compose -f docker-compose.yml -f docker-compose.tools.yml rm --stop --force -v

  docker.clean.images:
    usage: Stop all containers and remove all images.
    run:
      - command: docker-compose -f docker-compose.yml -f docker-compose.tools.yml  down --rmi all

  docker.clean.volumes:
    usage: Stop all containers and remove all volumes.
    run:
      - command: docker-compose -f docker-compose.yml -f docker-compose.tools.yml  down -v

  docker.clean:
    usage: Stop and clean everything but keep system cache for fast rebuilds.
    run:
      - task: docker.down
      - task: docker.clean.containers
      - task: docker.clean.images
      - task: docker.clean.volumes

  docker.prune.system:
    usage: WARNING! Prunes the whole system.
    run:
      command: docker system prune --volumes -a

  env.clean:
    usage: Reset any environment in this directory.
    description: >
      Does keep system cache for fast docker rebuilds.
      Go modules 0400 permissions, see https://github.com/golang/go/issues/27455#issuecomment-417997868
      Alternative without sudo docker-compose -f docker-compose.tools.yml run --rm --workdir="/" golocal go clean -modcache
    run:
      - command: tusk docker.clean
      - command: sudo rm -rf .direnv
      - command: sh install-tusk.sh

  env.build:
    usage: Build containers for dev tools.
    run:
      command: >
        docker-compose -f docker-compose.tools.yml build
        --force-rm
        --build-arg USER=${user}
        --build-arg GROUP=${group}
        --build-arg UID=${uid}
        --build-arg GID=${gid}
        golocal

  go.generate:
    usage: Generate a go package using //go:generate.
    args:
      package:
        usage: Go package to generate.
    run:
      - command: docker-compose -f docker-compose.tools.yml up -d golocal
      - command: docker-compose -f docker-compose.tools.yml exec golocal go generate -x ${package}

  go.generate.clean:
    usage: Clean up files generated by //go:generate.
    description: Currently used only by mocks.
    run:
      - command: find ./app -type d -name "mocks" -exec rm -rf {} +
    
  go.test:
    usage: Run go tests. For example go.test ./...
    args:
      package:
        usage: Go package to test.
    run:
      - command: docker-compose -f docker-compose.tools.yml up -d golocal
      - command: docker-compose -f docker-compose.tools.yml exec golocal go test -count=1 -v ${package}

  go.bench:
    usage: Run go benchmarks.
    args:
      package:
        usage: Go package to benchmark.
    run:
      - command: docker-compose -f docker-compose.tools.yml up -d golocal
      - command: docker-compose -f docker-compose.tools.yml exec golocal go test -run=xxx -bench=. ${package}

  go.vet:
    usage: Run go vet
    args:
      package:
        usage: Go package to vet.
    run:
      - command: docker-compose -f docker-compose.tools.yml up -d golocal
      - command: docker-compose -f docker-compose.tools.yml exec golocal go vet ${package}

  go.install.tools:
    usage: Install tools and dependencies necessary for code generation.
    run:
      - command: docker-compose -f docker-compose.tools.yml up -d golocal
      - command: docker-compose -f docker-compose.tools.yml exec -e GO111MODULE=on golocal go get -v golang.org/x/tools/go/packages
      - command: docker-compose -f docker-compose.tools.yml exec -e GO111MODULE=on golocal go get -v github.com/golang/mock/gomock
      - command: docker-compose -f docker-compose.tools.yml exec -e GO111MODULE=on golocal go install -v github.com/golang/mock/mockgen
      - command: >
          docker-compose -f docker-compose.tools.yml exec -e GO111MODULE=off golocal go get -d -v
          github.com/gogo/protobuf/...
          github.com/gogo/googleapis/...
          github.com/grpc-ecosystem/grpc-gateway/...

  gen.protolint:
    usage: Lint all protobuf definitions using prototool.
    run:
      command: docker-compose -f docker-compose.tools.yml run --rm -u ${uid}:${gid} prototool prototool lint

  gen.protoc:
    usage: Generate gRPC server, client, gateway, typescript and swagger for all services.
    run:
      command: docker-compose -f docker-compose.tools.yml run --rm -u ${uid}:${gid} prototool prototool generate

  gen.protoc.clean:
    usage: Clean all protoc generated files.
    run:
      - command: rm -rf ./app/idl
      - command: rm -rf ./frontend/generated
      - command: rm -rf ./swagger/idl

  gen.servers:
    usage: Parse proto API services from ./idl and generate server main files and Dockerfiles.
    run:
      - command: docker-compose -f docker-compose.tools.yml up -d golocal
      - command: docker-compose -f docker-compose.tools.yml exec golocal sh cmd/generate-servers/generate.sh

  gen.servers.clean:
    usage: Clean generated servers from ./app/cmd
    run:
      - command: find ./app/cmd -type d -iname "*grpc-server" -exec rm -rf {} +
      - command: find ./app/cmd -type d -iname "*gateway-server" -exec rm -rf {} +

  gen.clean:
    usage: Remove ALL generated files and directories.
    run:
      - task: go.generate.clean
      - task: gen.protoc.clean
      - task: gen.servers.clean

  gen.all:
    usage: Run all generators. (Must have run go.install.tools first).
    run:
      - task: gen.protoc
      - task:
          name: go.generate
          args:
            - ./...
      - task: gen.servers

  stack.build:
    usage: Build the whole stack.
    run:
      - command: docker-compose -f docker-compose.tools.yml build gobuild 
      - command: >
          docker-compose build
          --force-rm
          --parallel
          echo-grpc-server
          echo-gateway-server
          raspi-grpc-server
          raspi-gateway-server
          #metrics-server

