syntax = "proto3";

package heartbeat;

import "google/api/annotations.proto";
//import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
//import "google/protobuf/duration.proto";
//import "google/protobuf/field_mask.proto";
import "protoc-gen-swagger/options/annotations.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "github.com/mwitkow/go-proto-validators/validator.proto";

// A hack to generate into right directory. The default directory is $GOPATH/src.
option go_package = "../../services/heartbeat;heartbeat";

option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
  info: {
    version: "1.0";
  };
  external_docs: {
    url: "https://github.com/gogo/grpc-example";
    description: "gRPC heartbeat API";
  }
  schemes: HTTPS;
};

// Enable custom Marshal method.
option (gogoproto.marshaler_all) = true;
// Enable custom Unmarshal method.
option (gogoproto.unmarshaler_all) = true;
// Enable custom Size method (Required by Marshal and Unmarshal).
option (gogoproto.sizer_all) = true;
// Enable registration with golang/protobuf for the grpc-gateway.
option (gogoproto.goproto_registration) = true;
// Enable generation of XXX_MessageName methods for grpc-go/status.
option (gogoproto.messagename_all) = true;

message PingRequest {
  bytes Message = 1;
}
message PingReply {
  bytes Message = 1;
}

message StreamRequest {
  bytes id = 1 [
    (gogoproto.customname) = "ID",
    (validator.field) = {
      length_gt: 0,
      length_lt: 1000,
      human_error: "Must have len(id) between 0 and 1000"
    }
  ];
  google.protobuf.Timestamp create_date = 2 [
    (gogoproto.stdtime) = true
  ];
}

message StreamPacket {
  bytes id = 1;
  bytes Data = 2;
}

service HeartbeatService {
  rpc Ping(PingRequest) returns (PingReply) {
    option (google.api.http) = {
        get: "/ping"
    };
  }

  rpc Stream(StreamRequest) returns (stream StreamPacket) {
    option (google.api.http) = {
        post: "/stream",
        body: "*"
    };
  }
}


