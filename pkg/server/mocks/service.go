// Code generated by MockGen. DO NOT EDIT.
// Source: grpc-tools/pkg/server (interfaces: HeartbeatServiceServer)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	server "grpc-tools/pkg/server"
	reflect "reflect"
)

// MockHeartbeatServiceServer is a mock of HeartbeatServiceServer interface
type MockHeartbeatServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockHeartbeatServiceServerMockRecorder
}

// MockHeartbeatServiceServerMockRecorder is the mock recorder for MockHeartbeatServiceServer
type MockHeartbeatServiceServerMockRecorder struct {
	mock *MockHeartbeatServiceServer
}

// NewMockHeartbeatServiceServer creates a new mock instance
func NewMockHeartbeatServiceServer(ctrl *gomock.Controller) *MockHeartbeatServiceServer {
	mock := &MockHeartbeatServiceServer{ctrl: ctrl}
	mock.recorder = &MockHeartbeatServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHeartbeatServiceServer) EXPECT() *MockHeartbeatServiceServerMockRecorder {
	return m.recorder
}

// Ping mocks base method
func (m *MockHeartbeatServiceServer) Ping(arg0 context.Context, arg1 *server.PingRequest) (*server.PingReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", arg0, arg1)
	ret0, _ := ret[0].(*server.PingReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Ping indicates an expected call of Ping
func (mr *MockHeartbeatServiceServerMockRecorder) Ping(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockHeartbeatServiceServer)(nil).Ping), arg0, arg1)
}

// Stream mocks base method
func (m *MockHeartbeatServiceServer) Stream(arg0 *server.StreamRequest, arg1 server.HeartbeatService_StreamServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stream", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Stream indicates an expected call of Stream
func (mr *MockHeartbeatServiceServerMockRecorder) Stream(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stream", reflect.TypeOf((*MockHeartbeatServiceServer)(nil).Stream), arg0, arg1)
}
